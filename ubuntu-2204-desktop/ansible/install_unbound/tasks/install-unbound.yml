---
# install_unbound/tasks/install-unbound.yml

# This will install unbound with a hardened configuration file based on the defaults in pfSense, along with DNS logging and DNS over TLS.
# Ansible will attempt to stop and disable the built in systemd-resolved service. Should a different DNS resolver be bound to port 53,
# ansible will fail to start unbound and alert the user.
# Set verbosity: to 2, 3, or 4 in unbound.conf, then check:
# $ sudo journalctl -xeu unbound
# ...and:
# $ sudo unbound-checkconf
# ...and:
# $ sudo ss -anp -A inet
# ...to help you diagnose any errors.

# copy: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.html#ansible-collections-ansible-builtin-copy-module
# service: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/service_module.html#ansible-collections-ansible-builtin-service-module
# find: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/find_module.html
# find: https://stackoverflow.com/questions/59579882/ansible-how-to-copy-everything-from-files-folders-of-a-specific-role#59579993
# file: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html
# shell: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html#ansible-collections-ansible-builtin-shell-module
# register variables: https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html#registering-variables
# register with a loop: https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_loops.html#registering-variables-with-a-loop
# notify: https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_handlers.html#notifying-handlers
# conditionals: https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_conditionals.html

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Set unbound conf path for Debian/Ubuntu
  ansible.builtin.set_fact:
    unbound_confs_path: /etc/unbound/unbound.conf.d
  when: ansible_facts['os_family'] == "Debian"

- name: Set unbound conf path for RedHat/Fedora
  ansible.builtin.set_fact:
    unbound_confs_path: /etc/unbound/conf.d
  when: ansible_facts['os_family'] == "RedHat"

- name: Install Unbound (Debian / Ubuntu)
  ansible.builtin.apt:
    pkg:
      - unbound
      - unbound-anchor
      - dns-root-data
    update_cache: true
  when: ansible_facts['os_family'] == "Debian"
  become: true
  become_method: ansible.builtin.sudo

- name: Install Unbound (RedHat / Fedora)
  ansible.builtin.dnf:
    pkg:
      - unbound
    update_cache: true
  when: ansible_facts['os_family'] == "RedHat"
  become: true
  become_method: ansible.builtin.sudo

- name: Remove any existing root.key file
  ansible.builtin.file:
    path: /var/lib/unbound/root.key
    state: absent
  when: (ansible_facts['os_family'] == "RedHat") or
        (ansible_facts['distribution'] == "Kali")
  become: true
  become_method: ansible.builtin.sudo

- name: Install root.key for unbound (RedHat / Fedora / Kali)
  ansible.builtin.shell: |
    unbound-anchor -a /var/lib/unbound/root.key
    chown unbound:unbound /var/lib/unbound/root.key
  args:
    executable: /bin/bash
  when: (ansible_facts['os_family'] == "RedHat") or
        (ansible_facts['distribution'] == "Kali")
  become: true
  become_method: ansible.builtin.sudo
  ignore_errors: true

- name: Stop and disable systemd-resolved
  ansible.builtin.service:
    name: systemd-resolved
    state: stopped
    enabled: false
  when: (ansible_facts['services']['systemd-resolved.service']['status'] is not none) and
        (ansible_facts['services']['systemd-resolved.service']['status'] == "enabled")
  become: true
  become_method: ansible.builtin.sudo

- name: Ensure optional conf path exists
  ansible.builtin.file:
    path: "{{ unbound_confs_path }}"
    state: directory
    owner: root
    group: root
    mode: "755"
  become: true
  become_method: ansible.builtin.sudo

- name: Find existing optional Unbound configuration files
  ansible.builtin.find:
    paths: "{{ unbound_confs_path }}"
    file_type: file
    patterns: '*.conf'
    recurse: true
  register: optional_confs_old

- name: Remove existing Unbound optional configuration files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ optional_confs_old.files }}"
  become: true
  become_method: ansible.builtin.sudo

- name: Apply new Unbound configuration files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0644'
    remote_src: false
  with_items:
    - { src: 'unbound.conf', dest: '/etc/unbound/unbound.conf' }
    - { src: 'unbound.conf.d/unbound-dns-over-tls.conf', dest: '{{ unbound_confs_path }}/unbound-dns-over-tls.conf' }
    - { src: 'unbound.conf.d/unbound-logging.conf', dest: '{{ unbound_confs_path }}/unbound-logging.conf' }
  become: true
  become_method: ansible.builtin.sudo

# This will write the selected resolver configuration blocks listed in defaults/main.yml
# to {{ unbound_confs_path }}/unbound-dns-over-tls.conf
- name: Configure DNS Resolvers
  include_tasks: configure-dns.yml

- name: Register new unbound conf files
  ansible.builtin.find:
    paths: /etc/unbound/
    patterns: "*.conf"
    recurse: true
  register: unbound_confs

# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/replace_module.html
- name: Format conf files for OS (Debian / Ubuntu)
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: '\/conf\.d\/'
    replace: '/unbound.conf.d/'
  loop:
    "{{ unbound_confs.files }}"
  when: ansible_facts['os_family'] == "Debian"
  become: true
  become_method: ansible.builtin.sudo

# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/replace_module.html
- name: Format conf files for OS (RedHat / Fedora)
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: '\/unbound\.conf\.d\/'
    replace: '/conf.d/'
  loop:
    "{{ unbound_confs.files }}"
  when: ansible_facts['os_family'] == "RedHat"
  become: true
  become_method: ansible.builtin.sudo

- name: Create chroot dir (RedHat / Fedora)
  ansible.builtin.file:
    path: /var/lib/unbound/etc/unbound
    state: directory
    owner: unbound
    group: unbound
    mode: '0755'
  when: ansible_facts['os_family'] == "RedHat"
  become: true
  become_method: ansible.builtin.sudo

- name: Set chroot dir (RedHat / Fedora)
  ansible.builtin.lineinfile:
    path: "{{ item.path }}"
    regexp: '^#?\s+chroot: /.*$'
    line: '        chroot: /var/lib/unbound'
    backrefs: true
  loop:
    "{{ unbound_confs.files }}"
  when: ansible_facts['os_family'] == "RedHat"
  become: true
  become_method: ansible.builtin.sudo

- name: Check Unbound configurations
  ansible.builtin.shell: unbound-checkconf
  args:
    executable: /bin/bash
  notify: Restart Unbound
  become: true
  become_method: ansible.builtin.sudo

- name: Start and enable Unbound
  ansible.builtin.service:
    name: unbound
    state: started
    enabled: true
  become: true
  become_method: ansible.builtin.sudo

- name: Get stats of current resolv.conf
  ansible.builtin.stat:
    path: /etc/resolv.conf
  register: st

# https://www.jeffgeerling.com/blog/2019/how-idempotently-change-file-attributes-eg-immutable-ansible
- name: Remove immutable attribute
  ansible.builtin.file:
    path: /etc/resolv.conf
    attributes: -i
  register: resolv_attrs
  changed_when: "'i' in resolv_attrs.diff.before.attributes"
  when: ("immutable" in st.stat.attributes)
  become: true
  become_method: ansible.builtin.sudo

- name: Remove the managed symlink at /etc/resolv.conf (managed by systemd-resolved)
  ansible.builtin.file:
    path: /etc/resolv.conf
    state: absent
  become: true
  become_method: ansible.builtin.sudo

- name: Apply a new /etc/resolv.conf (Debian / Ubuntu)
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0644'
    remote_src: false
  with_items:
    - { src: 'resolv.conf', dest: '/etc/resolv.conf' }
  when: ansible_facts['os_family'] == "Debian"
  become: true
  become_method: ansible.builtin.sudo

- name: Get stats of new resolv.conf
  ansible.builtin.stat:
    path: /etc/resolv.conf
  register: st

# https://www.jeffgeerling.com/blog/2019/how-idempotently-change-file-attributes-eg-immutable-ansible
- name: Make new /etc/resolv.conf immutable (Debian / Ubuntu)
  ansible.builtin.file:
    path: /etc/resolv.conf
    attributes: +i
  register: resolv_attrs
  changed_when: "'i' in resolv_attrs.diff.before.attributes"
  when: (ansible_facts['os_family'] == "Debian") and
        ("immutable" not in st.stat.attributes)
  become: true
  become_method: ansible.builtin.sudo
