---
# build_kali_desktop/tasks/tools-webapp.yml

# Any general tools or system services not specfic to kali such as aide/auditd, DNS, or HIDS/IPS should be handled by other roles
# Each task file shares the same structure to maintain its own tool set:
# - apt packages
# - pip / go / ruby / npm packages
# - git release files
# - git repos to clone
# - any other individual files to download
# - any additional changes or adjustments specific to this task file
# For example, use this template to create a tools-forensics.yml task file
# apt_list_webapp would change to apt_list_forensics, and vars/main.yml would contain the apt_list_forensics variable of apt packages related to forensics
# Populate the remaining areas with any necessary lists; pip_list_forensics, author_repo_list_forensics, and so on

# ============
# apt packages
# ============
- name: Install packages from apt (webapp)
  ansible.builtin.apt:
    pkg: "{{ apt_list_webapp }}"
    state: latest
    autoclean: true
    autoremove: true
  become: true
  become_method: ansible.builtin.sudo
  when: apt_list_webapp is defined and apt_list_webapp != None and apt_list_webapp | length > 0

# ============
# pip packages
# ============
- name: Install essential packages via pip (webapp)
  ansible.builtin.pip:
    name: "{{ pip_list_webapp }}"
    extra_args: --user
    exectuable: pip3              # Otherwise may use pip3.11, or pip3.12; both have their own pip environments
    break_system_packages: true    # This may be required
  when: pip_list_webapp is defined and pip_list_webapp != None and pip_list_webapp | length > 0

# Use pipx for now, some packages may need a virtual environment
- name: Instal essential packages via pipx (webapp)
  ansible.builtin.shell: |
    pipx install "{{ item }}"
  args:
    executable: /bin/bash
  loop: "{{ pipx_list_webapp }}"
  when: pipx_list_webapp is defined and pipx_list_webapp != None and pipx_list_webapp | length > 0

# ==============================================
# External git release files (release_list_webapp)
# ==============================================
# Query the GitHub API, similar to how the sliver c2 installer works
# https://github.com/BishopFox/sliver/blob/d0e5fbb68081ea8853e4cb709cffb19fec1f675d/docs/sliver-docs/public/install#L98
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html#examples
# https://stackoverflow.com/questions/50966777/ansible-download-latest-release-binary-from-github-repo
# https://stackoverflow.com/questions/65231649/get-specific-data-from-github-api-url-via-ansible
# If you're debugging and trying to parse JSON response data from local OR remote JSON files (not url responses), opt to use ansible.builtin.slurp to
# ingest the data:
#   https://stackoverflow.com/questions/35403769/how-to-read-json-file-using-ansible
#     https://stackoverflow.com/a/63516424
#   https://docs.ansible.com/ansible/latest/collections/ansible/builtin/slurp_module.html
# For complex data parsing:
# https://docs.ansible.com/ansible/latest/playbook_guide/complex_data_manipulation.html
# JSON response structure:
# The "top level" data returned by GitHub's API is a dictionary { key1:value,key2:value... }
# "assets" is a top level key with a list of dictionaries as its value { ... "assets": [{key1:value, key2:value...}] ...}
# Remember that lists work based on array elements [<int>] for example [0] is the first element in an arrary
# Dictionaries are key:value pairs, so in other words keys can be thought of as the "names"
# Take the following JSON data structures:
#   ok: [localhost] => (item={'assets': [{'foo': [{'bar': 'findme'}]}]})
#   ok: [localhost] => (item={'assets': [{'foo': [{'bar': 'findme2'}, {'bar': 'findme4'}, {'bar': 'findme5'}]}]})
#   ok: [localhost] => (item={'assets': [{'foo': [{'bar': 'findme3'}]}]})
# This is a dictionary with one key ('assets'), the value of which is a list of one item ('foo') which is another (nested) dictionary, the value of which is
# another list of multiple dictionaries.
# Each dictionary is considered a separate object, that's how they there can be multiple values for a 'bar' key across multiple dictionaries in the same list
# If the 'bar' key was repeated within the same dicitonary (aka object), the final value would overwrite all other values of 'bar' in that dictionary
# You could access the value of all "bar" keys, with:
#   extracted_keys: "{{ extracted_keys | default([]) + item.assets | map(attribute='foo') | flatten | map(attribute='bar') | list }}"
#   - Initialize an empty list with `extracted_keys | default([])`
#   - `item` is the keyword being looped over, in this case JSON data, .assets is the first "object" in the data to be accessed
# To explain `map()` + `flatten`, take the following JSON data structure:
#   {"assets": [{"foo": [{"bar": "findme","baz": {"alpha": {"beta": [{"gamma": "delta"}]}}}]}]}
# You could access the "gamma" key's value of "delta" with:
#   extracted_keys:
#   "{{ extracted_keys | default([]) + item.assets | map(attribute='foo') | flatten | map(attribute='baz.alpha.beta') | flatten | map(attribute='gamma') | flatten | list }}"
# - Each list must be map()'d and flattened like above to access elements within it: item.assets | map(attribute='foo') | flatten | ...
# - That will give you access to all the objects within the "foo" list
# - Otherwise you can access / traverse subsequent nested objects like this: item.assets.foo.bar until you reach another list
# - See: https://docs.ansible.com/ansible/latest/playbook_guide/complex_data_manipulation.html#extract-keys-from-a-dictionary-matching-elements-from-a-list
# Read basenames of a list with {{ my_url_list | map('basename') | list }}
#   https://stackoverflow.com/questions/64766297/save-the-base-name-of-each-path-in-a-list-to-a-new-list
# Test strings with reject('<plugin>', '<string>') where plugin could be search, match, equalto, regex, etc.
#   https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_tests.html#testing-strings
# .results is used to access the return value of loops
#   https://docs.ansible.com/ansible/latest/reference_appendices/common_return_values.html#results

- name: "Obtain latest release info for external GitHub packages (webapp)"
  ansible.builtin.uri:
    url: "https://api.github.com/repos/{{ item }}/releases/latest"
    return_content: true
  register: response_json
  with_items: "{{ release_list_webapp }}"
  when: release_list_webapp is defined and release_list_webapp != None and release_list_webapp | length > 0

# Will need to find a way to move the regex into it's own variable, currently isn't an easy swap
# '(mac|darwin|arm|mips|ia32|ppc|s390x)' defines strings in release files we don't need to download
- name: "Gather browser_download_url values from latest releases via API (webapp)"
  set_fact:
    browser_download_urls: "{{ browser_download_urls | default([]) + item.json.assets | map(attribute='browser_download_url') | reject('regex', '(mac|darwin|arm|mips|ia32|ppc|s390x)') | list }}"
  loop: "{{ response_json.results }}"
  when: item.json.assets[0].browser_download_url is defined

# - name: Debug all download URLs
#   ansible.builtin.debug:
#     msg: "{{ browser_download_urls }}"
#     #msg: "{{ browser_download_urls | map('basename') | list }}"

- name: "Check downloads folder for each release file (webapp)"
  ansible.builtin.stat:
    path: "/home/{{ ansible_facts['env']['USER'] }}/Downloads/{{ item }}"
  register: release_file
  with_items: "{{ browser_download_urls | map('basename') | list }}"
  when: browser_download_urls is defined and browser_download_urls != None and browser_download_urls | length > 0

# Do something if package exists
# - name: "Print if release file exists locally (webapp)"
#   ansible.builtin.debug:
#     msg: "{{ item.item }}"
#   when: item.stat.exists
#   loop: "{{ release_file.results }}"

# with_together (replaced by loop: "{{ list_one|zip(list_two)|list }}") lets you reference two lists in a single loop as an array
# with_together is left as-is for readability
# The loop: syntax can be uncommented to replace with_together:
# Regardless of the syntax used, the first list is accessed as index [0], then the next list as [1], etc.
#   https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_loops.html#with-together
# In other words, do something if package does NOT exist
- name: "Download missing release files (webapp)"
  ansible.builtin.get_url:
    url: "{{ item.0 }}"
    dest: "/home/{{ ansible_facts['env']['USER'] }}/Downloads/"
    mode: "0644"
  loop: "{{ browser_download_urls | zip(release_file.results) | list }}"
  when: (browser_download_urls is defined and browser_download_urls != None and browser_download_urls | length > 0) and
        (not item.1.stat.exists)
#  with_together:
#    - "{{ browser_download_urls }}"
#    - "{{ release_file.results }}"

# ==========================================
# External git repos (author_repo_list_webapp)
# ==========================================
- name: "Clone and sync external git repos (webapp)"
  ansible.builtin.git:
    repo: "{{ item }}"
    dest: "/home/{{ ansible_facts['env']['USER'] }}/src/{{ item | basename }}"
    clone: true
    update: true
    version: HEAD # noqa: latest
  loop: "{{ author_repo_list_webapp }}"
  when: author_repo_list_webapp is defined and author_repo_list_webapp != None and author_repo_list_webapp | length > 0

# ========================================
# External files (external_file_list_webapp)
# ========================================
# https://stackoverflow.com/questions/63252155/how-to-iterate-over-multiple-urls-using-get-url-with-ansible
- name: "Check downloads folder for each individual file (webapp)"
  ansible.builtin.stat:
    path: "/home/{{ ansible_facts['env']['USER'] }}/Downloads/{{ item }}"
  register: individual_files
  with_items: "{{ file_list_webapp | map('basename') | list }}"
  when: file_list_webapp is defined and file_list_webapp != None and file_list_webapp | length > 0

- name: "Download any missing external files (webapp)"
  ansible.builtin.get_url:
    url: "{{ item.1 }}"
    dest: "/home/{{ ansible_facts['env']['USER'] }}/Downloads/"
    mode: "0644"
  loop: "{{ individual_files.results | zip(file_list_webapp) | list }}"
  when: (file_list_webapp is defined and file_list_webapp != None and file_list_webapp | length > 0) and
        (individual_files is defined and individual_files != None and individual_files | length > 0) and
        (not item.0.stat.exists)
#  with_together:
#    - "{{ individual_files.results }}"
#    - "{{ file_list_webapp }}"

# ====================
# Adjustments / Extras
# ====================

# Burpsuite
- name: "Register if Burpsuite CA exists"
  ansible.builtin.stat:
    path: /usr/local/share/ca-certificates/burpsuite.der
  register: burpsuite_cert

# https://github.com/IppSec/parrot-build/blob/master/roles/customize-browser/files/getburpcert.sh
# https://portswigger.net/burp/documentation/desktop/troubleshooting/launch-from-command-line
# /usr/bin/java: symbolic link to /etc/alternatives/java
# /etc/alternatives/java: symbolic link to /usr/lib/jvm/java-17-openjdk-amd64/bin/java
- name: "Export Burpsuite certificate"
  ansible.builtin.shell: |
    set -o pipefail
    /bin/bash -c "echo 'y' | java -Djava.awt.headless=true -jar /usr/share/burpsuite/burpsuite.jar &"
    sleep 30
    curl http://localhost:8080/cert -o /tmp/burpsuite.der
    pkill -f burpsuite.jar
  args:
    executable: /bin/bash
  when: not burpsuite_cert.stat.exists

- name: "Install Burpsuite certificate"
  ansible.builtin.copy:
    remote_src: true
    src: /tmp/burpsuite.der
    dest: /usr/local/share/ca-certificates/
    mode: "0644"
    owner: root
    group: root
  when: not burpsuite_cert.stat.exists
  become: true
  become_method: ansible.builtin.sudo

# TO DO: Burpsuite config template
# - localhost:8081
# - Dark UI

# OWASP ZAP
- name: "Register if ZAProxy CA exists"
  ansible.builtin.stat:
    path: /usr/local/share/ca-certificates/zaproxy.cer
  register: zaproxy_cert

# https://www.zaproxy.org/docs/desktop/cmdline/
# https://www.zaproxy.org/docs/desktop/addons/network/cmdline/
- name: "Export ZAP certificate"
  ansible.builtin.shell: |
    owasp-zap -cmd -certpubdump /tmp/zaproxy.cer
  when: not zaproxy_cert.stat.exists

- name: "Install ZAProxy certificate"
  ansible.builtin.copy:
    remote_src: true
    src: /tmp/zaproxy.cer
    dest: /usr/local/share/ca-certificates/
    mode: "0644"
    owner: root
    group: root
  when: not zaproxy_cert.stat.exists
  become: true
  become_method: ansible.builtin.sudo

# TO DO: ZAProxy config template
# - No HUD
# - localhost:8082
# - Protected mode by default
# - Dark UI
